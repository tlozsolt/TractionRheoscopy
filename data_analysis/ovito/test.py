# Boilerplate code generated by OVITO Pro 3.5.4
from ovito.io import *
from ovito.modifiers import *
from ovito.pipeline import *
from ovito.vis import *

# Data import:
testFile = '/Users/zsolt/Colloid/DATA/tfrGel23042022/strainRamp/d_imageStack/xyz/ovito/tmp_t000.xyz'
#pipeline = import_file('/Users/zsolt/Colloid/DATA/tfrGel23042022/strainRamp/d_imageStack/xyz/cleanSedGel_keepBool/stepd_sed_t*.xyz', columns = ['Particle Identifier', '', 'Position.Z', 'Position.Y', 'Position.X', '', '', '', '', '', '', '', ''])
pipeline = import_file(testFile, columns=['Particle Identifier', 'Position.Z', 'Position.Y','Position.X'])
pipeline.add_to_scene()

# Configuring visual elements associated with imported dataset:
pipeline.compute().particles.vis.radius = 1.0
pipeline.compute().cell.vis.enabled = False

# Coordination analysis:
pipeline.modifiers.append(CoordinationAnalysisModifier(
    cutoff = 10.0,
    number_of_bins = 350,
    enabled = False))

# Assign ParticleVolume:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('4/3*pi*(2.043/2)^3',),
    output_property = 'ParticleVolume'))

# Assign N = 1:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('1',),
    output_property = 'N'))

# Atomic strain:
pipeline.modifiers.append(AtomicStrainModifier(
    cutoff = 2.8,
    output_strain_tensors = True,
    output_stretch_tensors = True,
    output_rotations = True,
    output_nonaffine_squared_displacements = True,
    use_frame_offset = True))

# Assing LowStrainBool = True if ShearStrain < 0.025 - Expression selection:
pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'ShearStrain < 0.025'))

# Assing LowStrainBool = True if ShearStrain < 0.025 - Delete selected:
pipeline.modifiers.append(DeleteSelectedModifier(enabled = False))

# Assing LowStrainBool = True if ShearStrain < 0.025 - Assing LowStrainBool = True if ShearStrain < 0.025:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('ShearStrain < 0.03',),
    output_property = 'LowStrainBool'))

# Select Not LowStrain:
pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'LowStrainBool ? 0 : 1'))

# Cluster High Strain Particles:
pipeline.modifiers.append(ClusterAnalysisModifier(
    cutoff = 2.2,
    only_selected = True,
    sort_by_size = True,
    compute_com = True,
    compute_gyration = True,
    cluster_coloring = True))

data = pipeline.compute()

# User-defined modifier 'Compute ClusterSize':
from ovito.data import *
import numpy as np
def modify(frame, data):
    #Get the cluster size list data table
    cluster_sizes = data.tables['clusters'].y
    #Create a new particle property Cluster size
    cluster_size_pp = data.particles_.create_property("Cluster Size", data=cluster_sizes[data.particles["Cluster"] - 1])
pipeline.modifiers.append(modify)

# Assign InhomogNNB =1 if ClusterSize > 100, else 0:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('ClusterSize > 50',),
    output_property = 'InhomogNNB'))

# Compute nnb closure of InhomogNNB:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('InhomogNNB',),
    output_property = 'InhomogNNB',
    cutoff_radius = 2.8,
    neighbor_expressions = ('InhomogNNB',)))

# InhomogBool ==1, if InhomogNNB >=1:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('(InhomogNNB >= 1) && Position.Z > 60',),
    output_property = 'InhomogBool'))

# Clear selection:
pipeline.modifiers.append(ClearSelectionModifier())

# Select Inhomog deformation:
pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'InhomogBool'))

# Select Homog Deformation - Select Homog Deformation:
pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'InhomogBool'))

# Select Homog Deformation - Invert selection:
pipeline.modifiers.append(InvertSelectionModifier())

# Invert selection:
pipeline.modifiers.append(InvertSelectionModifier(enabled = False))

# Delete selected:
pipeline.modifiers.append(DeleteSelectedModifier(enabled = False))

# Select Homogeneous Deformation STZ Cluster:
pipeline.modifiers.append(ExpressionSelectionModifier(
    expression = '(InhomogBool == 0) && (LowStrainBool == 0)',
    enabled = False))

# Compute STZ bool, with nnb closure - Set STZ_nnb =1 for all homog clusters:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('(InhomogBool == 0) && (LowStrainBool == 0)',),
    output_property = 'STZ_nnb'))

# Compute STZ bool, with nnb closure - Compute nnb closure for STZ:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('STZ_nnb',),
    output_property = 'STZ_nnb',
    cutoff_radius = 2.2,
    neighbor_expressions = ('STZ_nnb',)))

# Compute STZ bool, with nnb closure - Compute STZ_Bool:
pipeline.modifiers.append(ComputePropertyModifier(
    expressions = ('STZ_nnb > 0',),
    output_property = 'STZ_bool'))

# Expression selection:
pipeline.modifiers.append(ExpressionSelectionModifier(
    expression = 'STZ_bool',
    enabled = False))

# Invert selection:
pipeline.modifiers.append(InvertSelectionModifier(enabled = False))

# Delete selected:
pipeline.modifiers.append(DeleteSelectedModifier(enabled = False))

# Expression selection:
pipeline.modifiers.append(ExpressionSelectionModifier(
    expression = 'STZ_bool',
    enabled = False))

# Spatial binning: mean:
pipeline.modifiers.append(SpatialBinningModifier(
    property = 'Volumetric Strain',
    bin_count = (20, 200, 200)))

# Spatial binning: Sum/binVolume:
pipeline.modifiers.append(SpatialBinningModifier(
    property = 'ParticleVolume',
    reduction_operation = SpatialBinningModifier.Operation.SumVol,
    bin_count = (20, 200, 200)))

# Clear selection:
pipeline.modifiers.append(ClearSelectionModifier())

# Slice:
pipeline.modifiers.append(SliceModifier(
    distance = 81.0,
    normal = (0.0, 0.0, 1.0),
    slab_width = 10.0,
    enabled = False))

# Color vonMises ShearStrain:
pipeline.modifiers.append(ColorCodingModifier(
    property = 'Shear Strain',
    end_value = 0.05,
    gradient = ColorCodingModifier.Viridis()))

# Viewport setup:
#vp = Viewport(
#    type = Viewport.Type.Ortho,
#    fov = 176.3229693566837,
#    camera_dir = (0.6929791493397227, 0.3654633976359598, -0.6214631152118159),
#    camera_pos = (78.21477136466645, 76.82310280596207, -49.5288617915148))
#
## Rendering:
#vp.render_image(filename='image.png', size=(1600, 1200), background=(0.0, 0.0, 0.0), frame=16)